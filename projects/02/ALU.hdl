// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    // Mux everything
    Not16(in=x, out=nnx);
    Not16(in=y, out=nny);
    
    Mux4Way16(a=x, b[0..15]=false, c=nnx, d[0..15]=true, sel[0]=zx, sel[1]=nx, out=outx);
    Mux4Way16(a=y, b[0..15]=false, c=nny, d[0..15]=true, sel[0]=zy, sel[1]=ny, out=outy);
    
    And16(a=outx, b=outy, out=outand);
    Add16(a=outx, b=outy, out=outadd);

    Mux16(a=outand, b=outadd, sel=f, out=outf);

    Not16(in=outf, out=noutf);

    Mux16(a=outf, b=noutf, sel=no, out=out);
    Mux16(a=outf, b=noutf, sel=no, out=outfin);

    And16(a[0..15]=true, b=outfin, out[15]=ng, out[0..14]=nng);

    And16(a=outfin, b=true, out[15]=zr15, out[14]=zr14, out[13]=zr13, out[0..12]=zr012);
    And16(a=outfin, b=true, out[13..15]=out1315, out[12]=zr12, out[11]=zr11, out[0..10]=zr010);
    And16(a=outfin, b=true, out[11..15]=out1115, out[10]=zr10, out[9]=zr9, out[0..8]=zr08);
    And16(a=outfin, b=true, out[9..15]=out915, out[8]=zr8, out[7]=zr7, out[0..6]=zr06);
    And16(a=outfin, b=true, out[7..15]=out715, out[6]=zr6, out[5]=zr5, out[0..4]=zr04);
    And16(a=outfin, b=true, out[5..15]=out515, out[4]=zr4, out[3]=zr3, out[0..2]=zr02);
    And16(a=outfin, b=true, out[3..15]=out315, out[2]=zr2, out[1]=zr1, out[0]=zr0);

    Or(a=zr15, b=zr0, out=zr01);
    Or(a=zr14, b=zr1, out=zr23);
    Or(a=zr13, b=zr2, out=zr45);
    Or(a=zr12, b=zr3, out=zr67);
    Or(a=zr11, b=zr4, out=zr89);
    Or(a=zr10, b=zr5, out=zr1011);
    Or(a=zr9, b=zr8, out=zr1213);

    Or(a=zr01, b=zr23, out=zr0123);
    Or(a=zr45, b=zr67, out=zr4567);
    Or(a=zr89, b=zr1011, out=zr891011);

    Or(a=zr0123, b=zr4567, out=zr01234567);
    Or(a=zr891011, b=zr1213, out=zr8910111213);

    Or(a=zr01234567, b=zr8910111213, out=zrall);

    Not(in=zrall, out=zr);

}