// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //Decode Logic
    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);

    And(a=Cinstruction, b=instruction[12], out=a);
    And(a=Cinstruction, b=instruction[11], out=c1);
    And(a=Cinstruction, b=instruction[10], out=c2);
    And(a=Cinstruction, b=instruction[9], out=c3);
    And(a=Cinstruction, b=instruction[8], out=c4);
    And(a=Cinstruction, b=instruction[7], out=c5);
    And(a=Cinstruction, b=instruction[6], out=c6);

    And(a=Cinstruction, b=instruction[5], out=d1); //A
    And(a=Cinstruction, b=instruction[4], out=d2, out=writeM); //M
    And(a=Cinstruction, b=instruction[3], out=d3); //D

    And(a=Cinstruction, b=instruction[2], out=j1);
    And(a=Cinstruction, b=instruction[1], out=j2);
    And(a=Cinstruction, b=instruction[0], out=j3);

    Or(a=d1, b=Ainstruction, out=loada);
    //The rest of the stuffs

    Mux16(a=outalu, b=instruction[0..15], sel=Ainstruction, out=outmux); //needs sel
    ARegister(in=outmux, load=loada, out=outA, out[0..14]=addressM); //needs load
    Mux16(a=outA, b=inM, sel=a, out=outAM);
    DRegister(in=outalu, load=d3, out=outD);//needs load
    ALU(x=outD, y=outAM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outalu, out=outM, zr=zr, ng=ng);//zr for zero, ng for negative

    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);

    And(a=nzr, b=nng, out=JGT);
    And(a=true, b=zr, out=JEQ);
    And(a=true, b=nng, out=JGE);
    And(a=ng, b=nzr, out=JLT);
    And(a=true, b=nzr, out=JNE);
    And(a=true, b=ng, out=JLE);

    Mux8Way16(a[0]=false, a[1..15]=false, b[0]=JGT, b[1..15]=false, c[0]=JEQ, c[1..15]=false, d[0]=JGE, d[1..15]=false, e[0]=JLT, e[1..15]=false, f[0]=JNE, f[1..15]=false, g[0]=JLE, g[1..15]=false, h[0]=true, h[1..15]=false, sel[0]=j1, sel[1]=j2, sel[2]=j3, out[0]=outload, out[1..15] = outnull);

    PC(in=outA, load=outload, inc=true, reset=reset, out[0..14]=pc);




}
